{"version":3,"sources":["components/Order/Order.module.css","components/Order/Order.js","containers/Orders/Orders.js"],"names":["module","exports","Order","order","props","ingredientsArr","ingredientName","ingredients","push","name","amount","ingOut","map","ing","react_default","a","createElement","style","textTransform","display","padding","border","margin","key","className","classes","price","Orders","this","fetchOrders","token","userId","orders","Spinner","loading","id","Component","connect","state","auth","dispatch","actions","withErrorHandler","axios"],"mappings":"6EACAA,EAAAC,QAAA,CAAkBC,MAAA,gJCqCHC,EAlCD,SAACC,GAEX,IAAMC,EAAgB,GACtB,IAAI,IAAIC,KAAkBF,EAAMG,YAC5BF,EAAeG,KAAK,CAChBC,KAAMH,EACNI,OAAQN,EAAMG,YAAYD,KAGlC,IAAMK,EAAON,EAAeO,IAAI,SAAAC,GAC5B,OACIC,EAAAC,EAAAC,cAAA,QACAC,MAAO,CACHC,cAAc,aACdC,QAAQ,eACRC,QAAQ,MACRC,OAAO,iBACPC,OAAQ,SAEZC,IAAKV,EAAIJ,MACJI,EAAIJ,KATT,IASgBI,EAAIH,OATpB,OAcR,OACII,EAAAC,EAAAC,cAAA,OAAKQ,UAAWC,IAAQvB,OACpBY,EAAAC,EAAAC,cAAA,wBAAgBL,GAChBG,EAAAC,EAAAC,cAAA,kBAASF,EAAAC,EAAAC,cAAA,cAASZ,EAAMsB,0CCnB9BC,8LAQEC,KAAKxB,MAAMyB,YAAYD,KAAKxB,MAAM0B,MAAOF,KAAKxB,MAAM2B,yCAqBpD,IAAIC,EAASlB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,MAUb,OATIL,KAAKxB,MAAM8B,UACXF,EAASJ,KAAKxB,MAAM4B,OAAOpB,IAAI,SAAAT,GAC3B,OAAOW,EAAAC,EAAAC,cAACd,EAAD,CACPqB,IAAKpB,EAAMgC,GACXT,OAAQvB,EAAMuB,MACdnB,YAAaJ,EAAMI,iBAKvBO,EAAAC,EAAAC,cAAA,WACCgB,UAzCQI,aAiENC,sBAjBS,SAAAC,GAEpB,MAAM,CACFN,OAAQM,EAAMN,OAAOA,OACrBE,QAASI,EAAMN,OAAOE,QACtBJ,MAAOQ,EAAMC,KAAKT,MAClBC,OAAQO,EAAMC,KAAKR,SAKA,SAAAS,GACvB,MAAM,CACFX,YAAa,SAACC,EAAMC,GAAP,OAAiBS,EAASC,IAAoBX,EAAMC,OAI1DM,CAA4CK,YAAiBf,EAAQgB","file":"static/js/5.4a2f0fae.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Order\":\"Order_Order__3y9o8\"};","import React from 'react';\r\n\r\nimport classes from './Order.module.css';\r\n\r\nconst order = (props) =>{\r\n\r\n    const ingredientsArr =[];\r\n    for(let ingredientName in props.ingredients){\r\n        ingredientsArr.push({\r\n            name: ingredientName,\r\n            amount: props.ingredients[ingredientName]\r\n        })\r\n    }\r\n    const ingOut=ingredientsArr.map(ing =>{\r\n        return(\r\n            <span \r\n            style={{\r\n                textTransform:'capitalize',\r\n                display:'inline-block',\r\n                padding:'2px',\r\n                border:'1px solid #eee',\r\n                margin: '0 3px'\r\n            }}\r\n            key={ing.name}>\r\n                {ing.name}({ing.amount})\r\n            </span>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <div className={classes.Order}>\r\n            <p>Ingredients:{ingOut}</p>\r\n            <p>Price <strong>{props.price}</strong></p>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default order;","import React, {Component} from 'react';\r\nimport axios from '../../axios-orders';\r\n\r\nimport Order from '../../components/Order/Order';\r\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\r\n\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../store/actions/index';\r\n\r\nimport Spinner from '../../components/UI/Spinner/Spinner'\r\n\r\n// asta este pagina care areata comenzile pe care le faci.\r\n\r\nclass Orders extends Component {\r\n    \r\n    // state = {\r\n    //     loading:true,\r\n    //     orders:[]\r\n    // }\r\n    \r\n    componentDidMount(){\r\n        this.props.fetchOrders(this.props.token, this.props.userId);\r\n        // nu mai este nevoie de asta pentru ca foloses codul asta in orders action creators.\r\n        // axios.get('/orders.json')\r\n        // .then(res =>{\r\n\r\n        //     let fetchedObj=[];\r\n        //     for(let i in res.data){\r\n        //         fetchedObj.push({\r\n        //             ...res.data[i],\r\n        //             id:i\r\n        //         })\r\n        //     }\r\n        //     console.log(fetchedObj);\r\n        //     this.setState({loading:false,orders:fetchedObj})\r\n        // })\r\n        // .catch(res=>{\r\n        //     this.setState({loading:false})\r\n        // })\r\n    }\r\n\r\n    render(){\r\n        let orders = <Spinner />\r\n        if(!this.props.loading){\r\n            orders = this.props.orders.map(order=>{\r\n                return <Order \r\n                key={order.id}\r\n                price={+order.price}\r\n                ingredients={order.ingredients}\r\n                />\r\n            })\r\n        }\r\n        return (\r\n            <div>\r\n            {orders}\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state =>{\r\n\r\n    return{\r\n        orders: state.orders.orders,\r\n        loading: state.orders.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    }\r\n    \r\n}\r\n\r\nconst mapDispatchToProps = dispatch=>{\r\n    return{\r\n        fetchOrders: (token,userId)=> dispatch(actions.fetchOrders(token,userId))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(withErrorHandler(Orders, axios));"],"sourceRoot":""}